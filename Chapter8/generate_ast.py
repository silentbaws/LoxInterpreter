import sys;
import os;

def define_visitor(file, base_name, type_defs):
    file.writelines(["  interface Visitor<R> {\n"])

    for class_def in type_defs:
        class_name = class_def.split(":")[0].strip()
        file.writelines("    R visit" + class_name + base_name + "(" + class_name + " " + class_name.lower() + ");\n")
    
    file.writelines(["  }\n\n"])

def define_type(file, base_name, class_name, fields):
    file.writelines([
        "  static class " + class_name + " extends " + base_name + " {\n",
        "    " + class_name + "(" + fields + ") {\n"
    ])

    for field in fields.split(', '):
        name = field.split(" ")[1]
        file.writelines([
            "      this." + name + " = " + name + ";\n",
        ])

    file.writelines([
        "    }\n",
        "\n",
        "    @Override\n",
        "    <R> R accept(Visitor<R> visitor) {\n",
        "      return visitor.visit" + class_name + base_name + "(this);\n",
        "    }\n\n"
    ])

    for field in fields.split(', '):
        file.writelines([
            "    final " + field + ";\n"
        ])

    file.writelines("  }\n\n")
    pass

# TODO: it would be a fun exercise to make this a java annotation
# @DefineAst(...args)
# public abstract class Expr {}
def define_ast(output_dir, base_name, type_defs):
    path = os.path.join(output_dir, base_name + ".java")
    with open(path, 'w', ) as file:
        file.writelines([
            "package com.davisellwood.lox;\n\n",
            "// THIS FILE IS GENERATED BY THE generate_ast.py SCRIPT\n\n"
            "import java.util.List;\n\n",
            "abstract class " + base_name + " {\n"
        ])

        define_visitor(file, base_name, type_defs)

        for class_def in type_defs:
            class_name = class_def.split(':')[0].strip()
            fields = class_def.split(':')[1].strip()
            define_type(file, base_name, class_name, fields)

        file.writelines([
            "  abstract <R> R accept(Visitor<R> visitor);\n"
            "}\n",
        ])


def main():
    output_dir = sys.argv[1]
    define_ast(output_dir, "Expr", [
        "Assign   : Token name, Expr value",
        "Binary   : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal  : Object value",
        "Unary    : Token operator, Expr right",
        "Variable : Token name",
    ])

    define_ast(output_dir, "Stmt", [
        "Block      : List<Stmt> statements",
        "Expression : Expr expression",
        "Print      : Expr expression",
        "Var        : Token name, Expr initializer",
    ])
    
    pass

if __name__ == '__main__':
    main()